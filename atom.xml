<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孟宪亮的博客</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://mengxianliang.github.io/blog/"/>
  <updated>2017-08-16T09:08:54.000Z</updated>
  <id>http://mengxianliang.github.io/blog/</id>
  
  <author>
    <name>孟宪亮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优酷播放按钮动画原理解析</title>
    <link href="http://mengxianliang.github.io/blog/2017/08/16/%E4%BC%98%E9%85%B7%E6%92%AD%E6%94%BE%E6%8C%89%E9%92%AE%E5%8A%A8%E7%94%BB%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://mengxianliang.github.io/blog/2017/08/16/优酷播放按钮动画原理解析/</id>
    <published>2017-08-16T09:00:00.000Z</published>
    <updated>2017-08-16T09:08:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、动画过程分析"><a href="#一、动画过程分析" class="headerlink" title="一、动画过程分析"></a>一、动画过程分析</h1><h2 id="1、拆分动画"><a href="#1、拆分动画" class="headerlink" title="1、拆分动画"></a>1、拆分动画</h2><p><strong>正常动画效果如下：</strong></p>
<p><img src="http://img.blog.csdn.net/20170816143345217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="正常动画效果"></p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:left">现象</th>
<th style="text-align:left">结论</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">放慢动画</td>
<td style="text-align:left"><img src="http://img.blog.csdn.net/20170816143556064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="放慢后的动画效果"></td>
<td style="text-align:left">可以看出动画是由外侧的蓝色部分和中间的红色三角组成。</td>
</tr>
<tr>
<td style="text-align:left">去掉旋转</td>
<td style="text-align:left"><img src="http://img.blog.csdn.net/20170816143927983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="去掉旋转后的效果"></td>
<td style="text-align:left">可以看出核心的东西就是竖和弧线的缩进、三角形的透明度变化。</td>
</tr>
<tr>
<td style="text-align:left">只保一侧留竖线和圆弧</td>
<td style="text-align:left"><img src="http://img.blog.csdn.net/20170816144614885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="竖线、圆弧"></td>
<td style="text-align:left">可以看出竖线的动画时长大概是圆弧动动画时长的一半；弧线的运动角度是π/2，两个弧线正好组成一个完整的圆环。</td>
</tr>
<tr>
<td style="text-align:left">只保留三角动画</td>
<td style="text-align:left"><img src="http://img.blog.csdn.net/20170816145130960?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="三角动画"></td>
<td style="text-align:left">三角动画比较简单，就是两条半透明直线组成的三角，交叉处颜色会变深。然后添加改变其透明度的动画。</td>
</tr>
</tbody>
</table>
<h2 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h2><p>动画是由四部分组成：</p>
<p>1、直线的缩放<br>2、弧线的缩放<br>3、三角的透明度变化<br>4、整体的旋转。</p>
<p>三个部分中<strong>执行时间最长</strong>的是弧线的缩放，找到这个很重要，这样就可以确定其他动画的开始时间和持续时间了，这个会在下面解释。</p>
<h1 id="二、动画开发"><a href="#二、动画开发" class="headerlink" title="二、动画开发"></a>二、动画开发</h1><h2 id="1、竖线动画"><a href="#1、竖线动画" class="headerlink" title="1、竖线动画"></a>1、竖线动画</h2><p>在开发这类动画的时候，一般是先在外面个框框和辅助线，帮助我们更好的完成开发。<br>这里设整个“容器”的边长是a，坐标系的原点为容器的左上角。<br>设从暂停—&gt;播放的状态为正向,从播放—&gt;暂停为逆向。</p>
<p>  效果入下：</p>
<p>  <img src="http://img.blog.csdn.net/20170816152053043?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="添加坐标系"></p>
<p>确定好坐标系后，我们来添加一条竖线。并且给竖线添加一个缩放的动画。</p>
<p>分析：这个动画的整体只不过是从暂停状态到播放状态的转换过程以及逆向过程。所以不能单单的通过bounds和position属性来绘制这个layer，需要用到的是CAShapeLayer+UIBezierPath来创建这个layer，并通过改变layer的strokeEnd属性进行对竖线的缩放操作。</p>
<p>设左侧直线的起点为：(a<em>0.2,a</em>0.9)，终点为：(a<em>0.2,a</em>0.1)<br>（之所以这样设定是为了更贴近原版优酷按钮的效果，以及计算上的方便。）<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addLeftLineLayer &#123;</div><div class="line">    <span class="built_in">CGFloat</span> a = <span class="keyword">self</span>.layer.bounds.size.width;</div><div class="line">    <span class="comment">//创建竖线路径</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(a*<span class="number">0.2</span>,a*<span class="number">0.9</span>)];</div><div class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(a*<span class="number">0.2</span>,a*<span class="number">0.1</span>)];</div><div class="line">    </div><div class="line">    <span class="comment">//创建竖线显示层</span></div><div class="line">    _leftLineLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    _leftLineLayer.path = path.CGPath;</div><div class="line">    _leftLineLayer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">    _leftLineLayer.strokeColor = BLueColor.CGColor;</div><div class="line">    _leftLineLayer.lineWidth = [<span class="keyword">self</span> lineWidth];</div><div class="line">    <span class="comment">//终点类型为圆形</span></div><div class="line">    _leftLineLayer.lineCap = kCALineCapRound;</div><div class="line">    <span class="comment">//连接点为圆形</span></div><div class="line">    _leftLineLayer.lineJoin = kCALineJoinRound;</div><div class="line">    [<span class="keyword">self</span>.layer addSublayer:_leftLineLayer];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就添加了一条竖线，且竖线的起点在下，终点在上，是因为从暂停向播放转换时是向下缩放，逆向时是向上缩放。</p>
<p>为了代码的简洁性，写了一个单独的strokeEnd属性动画方法：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 执行strokeEnd动画</div><div class="line"> 参数为执行时间，起始值，被添加的layer</div><div class="line"> */</div><div class="line">- (<span class="built_in">CABasicAnimation</span> *)strokeEndAnimationFrom:(<span class="built_in">CGFloat</span>)fromValue to:(<span class="built_in">CGFloat</span>)toValue onLayer:(<span class="built_in">CALayer</span> *)layer duration:(<span class="built_in">CGFloat</span>)duration&#123;</div><div class="line">    <span class="built_in">CABasicAnimation</span> *strokeEndAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</div><div class="line">    strokeEndAnimation.duration = duration;</div><div class="line">    strokeEndAnimation.fromValue = @(fromValue);</div><div class="line">    strokeEndAnimation.toValue = @(toValue);</div><div class="line">    <span class="comment">//这两个属性设定保证在动画执行之后不自动还原</span></div><div class="line">    strokeEndAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    strokeEndAnimation.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    [layer addAnimation:strokeEndAnimation forKey:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">return</span> strokeEndAnimation;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在正向动画的过程中左侧竖线strokeEnd属性从1到0：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span> strokeEndAnimationFrom:<span class="number">1</span> to:<span class="number">0</span> onLayer:_leftLineLayer duration:animationDuration/<span class="number">2</span>];</div></pre></td></tr></table></figure></p>
<p>在逆向动画的过程中左侧竖线strokeEnd属性从0到1：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span> strokeEndAnimationFrom:<span class="number">0</span> to:<span class="number">1</span> onLayer:_leftLineLayer duration:animationDuration/<span class="number">2</span>];</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p><img src="http://img.blog.csdn.net/20170816154411423?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="竖线动画"></p>
<p>同理添加右侧竖线，注意右侧竖线的终点在下，起点在上。并添加动画后效果如下：</p>
<p><img src="http://img.blog.csdn.net/20170816154731601?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="两条竖线"></p>
<h2 id="2、圆弧动画"><a href="#2、圆弧动画" class="headerlink" title="2、圆弧动画"></a>2、圆弧动画</h2><p>再确定两条直线后，弧线就比较容易添加了，在正向动画过程中：</p>
<p>左侧弧线是从左侧竖线的起点逆时针到右侧竖线的起点<br>右侧弧线是从右侧竖线的起点顺时针到左侧竖线的起点</p>
<p>如下图所示，添加左侧弧线效果<br><img src="http://img.blog.csdn.net/20170816155328942?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="圆弧动画"></p>
<p>要绘制一个圆弧最好的方式是通过半径和起始角度+结束角度这种方式来确定的。<br>下面看一下示意图<br><img src="http://img.blog.csdn.net/20170816161248026?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="示意图"></p>
<p>如图所示，直角三角形的边长为0.3a、0.4a、0.5a，<br>所以根据反三角函数，角θ为acos(0.4a/0.5a)<br>通过这几点可以确定：<br>弧线的半径为0.5a<br>起始角度为：CGFloat startAngle = acos(4.0/5.0) + M_PI_2;<br>结束角度为：CGFloat endAngle = startAngle - M_PI;</p>
<p>添加弧线代码：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addLeftCircle &#123;</div><div class="line">    <span class="built_in">CGFloat</span> a = <span class="keyword">self</span>.layer.bounds.size.width;</div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(a*<span class="number">0.2</span>,a*<span class="number">0.9</span>)];</div><div class="line">    <span class="built_in">CGFloat</span> startAngle = acos(<span class="number">4.0</span>/<span class="number">5.0</span>) + M_PI_2;</div><div class="line">    <span class="built_in">CGFloat</span> endAngle = startAngle - M_PI;</div><div class="line">    [path addArcWithCenter:<span class="built_in">CGPointMake</span>(a*<span class="number">0.5</span>, a*<span class="number">0.5</span>) radius:<span class="number">0.5</span>*a startAngle:startAngle endAngle:endAngle clockwise:<span class="literal">false</span>];</div><div class="line">    </div><div class="line">    _leftCircle = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    _leftCircle.path = path.CGPath;</div><div class="line">    _leftCircle.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">    _leftCircle.strokeColor = LightBLueColor.CGColor;</div><div class="line">    _leftCircle.lineWidth = [<span class="keyword">self</span> lineWidth];</div><div class="line">    _leftCircle.lineCap = kCALineCapRound;</div><div class="line">    _leftCircle.lineJoin = kCALineJoinRound;</div><div class="line">    _leftCircle.strokeEnd = <span class="number">0</span>;</div><div class="line">    [<span class="keyword">self</span>.layer addSublayer:_leftCircle];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>*这里注意弧线暂停时是隐藏的，所以strokeEnd为0；</p>
<p>正向过程执行strokeEnd动画：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span> strokeEndAnimationFrom:<span class="number">0</span> to:<span class="number">1</span> onLayer:_leftLineLayer duration:animationDuration];</div></pre></td></tr></table></figure></p>
<p>逆向过程：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span> strokeEndAnimationFrom:<span class="number">1</span> to:<span class="number">0</span> onLayer:_leftCircle duration:animationDuration ];</div></pre></td></tr></table></figure></p>
<p>*这里需要注意的是，弧线动画执行的时长是直线动画的二倍，即整个动画的执行时间就是弧线的动画时间animationDuration，所以直线的动画时间为：animationDuration/2。后面的旋转动画时长也是通过animationDuration确定的。</p>
<p>添加左右弧线后的动画效果：</p>
<p><img src="http://img.blog.csdn.net/20170816162619559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="3、三角动画"><a href="#3、三角动画" class="headerlink" title="3、三角动画"></a>3、三角动画</h2><p>三角动画相对于之前的竖线和圆弧的动画比较简单，就是通过两条直线确定一个三角形<br>添加这个三角形前，还是先创建一个放置三角形的“容器”，然后通过这个容器确定三角形两条边的起点和终点，如图所示：<br><img src="http://img.blog.csdn.net/20170816163212661?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="三角辅助线"></p>
<p>如图可以看出，三角两条边的起点为“容器”的底边中点，两条边的终点分别为“容器”的左上角及右上角。<br>代码如下：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addCenterTriangleLayer &#123;</div><div class="line">    <span class="built_in">CGFloat</span> a = <span class="keyword">self</span>.layer.bounds.size.width;</div><div class="line">    <span class="comment">//初始化容器</span></div><div class="line">    _triangleCotainer = [<span class="built_in">CALayer</span> layer];</div><div class="line">    _triangleCotainer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>*a, <span class="number">0.35</span>*a);</div><div class="line">    _triangleCotainer.position = <span class="built_in">CGPointMake</span>(a*<span class="number">0.5</span>, a*<span class="number">0.55</span>);</div><div class="line">    _triangleCotainer.opacity = <span class="number">0</span>;</div><div class="line">    _triangleCotainer.borderWidth = <span class="number">1</span>;</div><div class="line">    [<span class="keyword">self</span>.layer addSublayer:_triangleCotainer];</div><div class="line">    </div><div class="line">    <span class="comment">//容器宽高</span></div><div class="line">    <span class="built_in">CGFloat</span> b = _triangleCotainer.bounds.size.width;</div><div class="line">    <span class="built_in">CGFloat</span> c = _triangleCotainer.bounds.size.height;</div><div class="line">    </div><div class="line">    <span class="comment">//第一条边</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path1 = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">    [path1 moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>,<span class="number">0</span>)];</div><div class="line">    [path1 addLineToPoint:<span class="built_in">CGPointMake</span>(b/<span class="number">2</span>,c)];</div><div class="line">    </div><div class="line">    <span class="built_in">CAShapeLayer</span> *layer1 = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    layer1.path = path1.CGPath;</div><div class="line">    layer1.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">    layer1.strokeColor = RedColor.CGColor;</div><div class="line">    layer1.lineWidth = [<span class="keyword">self</span> lineWidth];</div><div class="line">    layer1.lineCap = kCALineCapRound;</div><div class="line">    layer1.lineJoin = kCALineJoinRound;</div><div class="line">    layer1.strokeEnd = <span class="number">1</span>;</div><div class="line">    [_triangleCotainer addSublayer:layer1];</div><div class="line">    </div><div class="line">    <span class="comment">//第二条边</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path2 = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">    [path2 moveToPoint:<span class="built_in">CGPointMake</span>(b,<span class="number">0</span>)];</div><div class="line">    [path2 addLineToPoint:<span class="built_in">CGPointMake</span>(b/<span class="number">2</span>,c)];</div><div class="line">    </div><div class="line">    <span class="built_in">CAShapeLayer</span> *layer2 = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    layer2.path = path2.CGPath;</div><div class="line">    layer2.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">    layer2.strokeColor = RedColor.CGColor;</div><div class="line">    layer2.lineWidth = [<span class="keyword">self</span> lineWidth];</div><div class="line">    layer2.lineCap = kCALineCapRound;</div><div class="line">    layer2.lineJoin = kCALineJoinRound;</div><div class="line">    layer2.strokeEnd = <span class="number">1</span>;</div><div class="line">    [_triangleCotainer addSublayer:layer2];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加透明度动画<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)actionTriangleOpacityAnimationFrom:(<span class="built_in">CGFloat</span>)from to:(<span class="built_in">CGFloat</span>)to duration:(<span class="built_in">CGFloat</span>)duration&#123;</div><div class="line">    <span class="built_in">CABasicAnimation</span> *alphaAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">    alphaAnimation.duration = duration; <span class="comment">// 持续时间</span></div><div class="line">    alphaAnimation.fromValue = @(from);</div><div class="line">    alphaAnimation.toValue = @(to);</div><div class="line">    alphaAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    alphaAnimation.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    [alphaAnimation setValue:<span class="string">@"alphaAnimation"</span> forKey:<span class="string">@"animationName"</span>];</div><div class="line">    [_triangleCotainer addAnimation:alphaAnimation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p><img src="http://img.blog.csdn.net/20170816163838203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<h2 id="4、旋转动画"><a href="#4、旋转动画" class="headerlink" title="4、旋转动画"></a>4、旋转动画</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)actionRotateAnimationClockwise:(<span class="built_in">BOOL</span>)clockwise &#123;</div><div class="line">    <span class="comment">//逆时针旋转</span></div><div class="line">    <span class="built_in">CGFloat</span> startAngle = <span class="number">0.0</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> endAngle = -M_PI_2;</div><div class="line">    <span class="built_in">CGFloat</span> duration = <span class="number">0.75</span> * animationDuration;</div><div class="line">    <span class="comment">//顺时针旋转</span></div><div class="line">    <span class="keyword">if</span> (clockwise) &#123;</div><div class="line">        startAngle = -M_PI_2;</div><div class="line">        endAngle = <span class="number">0.0</span>;</div><div class="line">        duration = animationDuration;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CABasicAnimation</span> *roateAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation"</span>];</div><div class="line">    roateAnimation.duration = duration; <span class="comment">// 持续时间</span></div><div class="line">    roateAnimation.fromValue = [<span class="built_in">NSNumber</span> numberWithFloat:startAngle];</div><div class="line">    roateAnimation.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:endAngle];</div><div class="line">    roateAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    roateAnimation.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    [roateAnimation setValue:<span class="string">@"roateAnimation"</span> forKey:<span class="string">@"animationName"</span>];</div><div class="line">    [<span class="keyword">self</span>.layer addAnimation:roateAnimation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终效果如下：</p>
<p><img src="http://img.blog.csdn.net/20170816143345217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="正常动画效果"></p>
<h1 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h1><p>所有的看起来复杂的动画只要拆分成各个模块都是比较简单的，只要把各个模块做好在拼凑到一起就可以了。</p>
<h1 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h1><p><strong>Github：<a href="https://github.com/mengxianliang/XLPlayButton" target="_blank" rel="external">https://github.com/mengxianliang/XLPlayButton</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、动画过程分析&quot;&gt;&lt;a href=&quot;#一、动画过程分析&quot; class=&quot;headerlink&quot; title=&quot;一、动画过程分析&quot;&gt;&lt;/a&gt;一、动画过程分析&lt;/h1&gt;&lt;h2 id=&quot;1、拆分动画&quot;&gt;&lt;a href=&quot;#1、拆分动画&quot; class=&quot;headerlink&quot; title=&quot;1、拆分动画&quot;&gt;&lt;/a&gt;1、拆分动画&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;正常动画效果如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170816143345217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;正常动画效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="动画" scheme="http://mengxianliang.github.io/blog/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动打包并发布到Fir.im</title>
    <link href="http://mengxianliang.github.io/blog/2017/06/06/iOS%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0Fir.im/"/>
    <id>http://mengxianliang.github.io/blog/2017/06/06/iOS自动打包并发布到Fir.im/</id>
    <published>2017-06-06T09:00:00.000Z</published>
    <updated>2017-06-06T09:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近公司有个新需求，就是后台要添加一个新功能，在页面上更换App的标题、Logo等信息，然后可以自动生成apk和ipa文件。于是就研究了一下自动打包ipa这个功能</p>
<a id="more"></a>
<h2 id="二、牛逼的工具fastlane"><a href="#二、牛逼的工具fastlane" class="headerlink" title="二、牛逼的工具fastlane"></a>二、牛逼的工具fastlane</h2><p><a href="https://github.com/fastlane/fastlane" target="_blank" rel="external">fastlane</a>这个工具牛逼之处就是几乎包含了和ipa相关的所有功能，例如打包、提交审核、测试、自动截屏等等。这里就主要介绍一下其中的打包工具gym。</p>
<h2 id="三、实现原理简介"><a href="#三、实现原理简介" class="headerlink" title="三、实现原理简介"></a>三、实现原理简介</h2><h3 id="1、安装fastlane"><a href="#1、安装fastlane" class="headerlink" title="1、安装fastlane"></a>1、安装fastlane</h3><p>这里先说一下fastlane的安装，很简单只需在终端输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gem install fastlane</div></pre></td></tr></table></figure></p>
<p>(需提前安装gem环境)</p>
<h3 id="2、使用gym工具"><a href="#2、使用gym工具" class="headerlink" title="2、使用gym工具"></a>2、使用gym工具</h3><p>在安装fastlane时已默认安装了常用工具，所以不需要另外安装gym工具</p>
<p>调用gym需要cd到项目目录，然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fastlane gym</div></pre></td></tr></table></figure></p>
<p>这个命令是自动打包然后推送到ITunesConnect中，在这个过程中需要输入AppId及密码。</p>
<p>如果不需要提交到ITunesConnet中，可执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fastlane gym --export_method ad-hoc</div></pre></td></tr></table></figure></p>
<p>会自动生成ipa文件，以便后续操作。<br>详细的gym命令请参考<a href="https://github.com/fastlane/fastlane/tree/master/gym" target="_blank" rel="external">gym文档</a></p>
<h3 id="3、使用fir"><a href="#3、使用fir" class="headerlink" title="3、使用fir"></a>3、使用fir</h3><p>之前一直是在fir的页面上进行操作，也是第一次在命令行使用fir。<br>安装 <a href="https://github.com/FIRHQ/fir-cli" target="_blank" rel="external">fir-cli</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem install fir-cli</div></pre></td></tr></table></figure></p>
<p>安装后可以先执行登陆操作，登陆后在后续操作中可以不用重复添加token了(token需要到fir个人账号中获得)，登陆方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fir login XXX_YOUR_API_TOKEN_XXX</div></pre></td></tr></table></figure></p>
<p>发布ipa到fir，需要提前准备好ipa文件，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fir publish APP_FILE_PATH</div></pre></td></tr></table></figure></p>
<h2 id="四、自动化打包"><a href="#四、自动化打包" class="headerlink" title="四、自动化打包"></a>四、自动化打包</h2><p>为了实现一键打包的方案，需要将gym和fir结合到一起，这里利用了一个脚本文件，在使用时直接执行这个脚本文件即可,文件内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">#设置超时</div><div class="line">export FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=120</div><div class="line"></div><div class="line">#计时</div><div class="line">SECONDS=0</div><div class="line"></div><div class="line">#假设脚本放置在与项目相同的路径下</div><div class="line">project_path=$(pwd)</div><div class="line">#取当前时间字符串添加到文件结尾</div><div class="line">now=$(date +&quot;%Y_%m_%d_%H_%M_%S&quot;)</div><div class="line"></div><div class="line">#指定项目的scheme名称</div><div class="line">scheme=&quot;Demo&quot;</div><div class="line">#指定要打包的配置名</div><div class="line">configuration=&quot;Adhoc&quot;</div><div class="line">#指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id，即xcodebuild的method参数</div><div class="line">export_method=&apos;ad-hoc&apos;</div><div class="line"></div><div class="line">#指定项目地址</div><div class="line">workspace_path=&quot;$project_path/Demo.xcworkspace&quot;</div><div class="line">#指定输出路径</div><div class="line">output_path=&quot;$project_path/IPA&quot;</div><div class="line">#指定输出归档文件地址</div><div class="line">archive_path=&quot;$output_path/Demo_$&#123;now&#125;.xcarchive&quot;</div><div class="line">#指定输出ipa地址</div><div class="line">ipa_path=&quot;$output_path/Demo_$&#123;now&#125;.ipa&quot;</div><div class="line">#指定输出ipa名称</div><div class="line">ipa_name=&quot;Demo_$&#123;now&#125;.ipa&quot;</div><div class="line">#获取执行命令时的commit message</div><div class="line">commit_msg=&quot;$1&quot;</div><div class="line"></div><div class="line">#输出设定的变量值</div><div class="line">echo &quot;===workspace path: $&#123;workspace_path&#125;===&quot;</div><div class="line">echo &quot;===archive path: $&#123;archive_path&#125;===&quot;</div><div class="line">echo &quot;===ipa path: $&#123;ipa_path&#125;===&quot;</div><div class="line">echo &quot;===export method: $&#123;export_method&#125;===&quot;</div><div class="line">echo &quot;===commit msg: $1===&quot;</div><div class="line"></div><div class="line">#先清空前一次build</div><div class="line">fastlane gym --workspace $&#123;workspace_path&#125; --scheme $&#123;scheme&#125; --clean --configuration $&#123;configuration&#125; --archive_path $&#123;archive_path&#125; --export_method $&#123;export_method&#125; --output_directory $&#123;output_path&#125; --output_name $&#123;ipa_name&#125;</div><div class="line"></div><div class="line">#上传到fir</div><div class="line">fir publish $&#123;ipa_path&#125; -T &quot;XXX_YOUR_API_TOKEN_XXX&quot; -c &quot;$&#123;commit_msg&#125;&quot;</div><div class="line"></div><div class="line">#输出总用时</div><div class="line">echo &quot;===Finished. Total time: $&#123;SECONDS&#125;s===&quot;</div></pre></td></tr></table></figure></p>
<p>（1、使用该文件需要项目支持CocoaPods；2、本项目的项目名称是<code>Demo</code>,在实际使用时需要将<code>Demo</code>替换成自己的项目名称；3、需要将<code>XXX_YOUR_API_TOKEN_XXX</code> 换成自己的fir token）</p>
<p>如文件名文<code>AutoPack.sh</code>,打包时只需要在cd到项目文件下，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./AutoPack.sh</div></pre></td></tr></table></figure></p>
<p>执行后会自动打包，ipa文件自动存储到工程文件同目录下的IPA文件夹下，并且会自动提交到Fir上，整个流程执行结束后会提示完成时间，如出现错误也会打印出来。</p>
<h2 id="五、遇到的问题"><a href="#五、遇到的问题" class="headerlink" title="五、遇到的问题"></a>五、遇到的问题</h2><p>在执行上传到Fir上的时候遇到了SSL证书报错，最后找了半天原因是Ruby的数据源地址使用的https地址，换成http地址即可。<a href="https://github.com/FIRHQ/fir-cli/issues/122" target="_blank" rel="external">解决办法戳这里</a></p>
<h2 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h2><p>1、<a href="http://www.jianshu.com/p/54ab07f2e63b/" target="_blank" rel="external">使用fastlane gym/xctool编写ipa打包脚本</a><br>2、<a href="http://www.jianshu.com/p/edcd8d9430f6" target="_blank" rel="external">Fastlane自动化构建工具(完整解决测试和发布流程)</a><br>3、<a href="https://juejin.im/post/58c237cd44d9040068e80be1" target="_blank" rel="external">Fastlane + Bugly自动化部署测试包</a><br>4、<a href="https://github.com/mythkiven/AD_Fastlane" target="_blank" rel="external">iOS App 自动化上传 AppStore ,一键部署 App</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;最近公司有个新需求，就是后台要添加一个新功能，在页面上更换App的标题、Logo等信息，然后可以自动生成apk和ipa文件。于是就研究了一下自动打包ipa这个功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动打包" scheme="http://mengxianliang.github.io/blog/tags/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>iOS 动画解析 支付宝支付动画 下</title>
    <link href="http://mengxianliang.github.io/blog/2017/04/17/iOS%20%E5%8A%A8%E7%94%BB%E8%A7%A3%E6%9E%90%20%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%A8%E7%94%BB%20%E4%B8%8B/"/>
    <id>http://mengxianliang.github.io/blog/2017/04/17/iOS 动画解析 支付宝支付动画 下/</id>
    <published>2017-04-17T08:11:43.000Z</published>
    <updated>2017-04-17T08:13:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://mengxianliang.com/blog/2017/04/17/iOS%20动画解析%20支付宝支付动画%20上/" target="_blank" rel="external">上一篇博客</a>分析了<strong>支付中</strong>动画的实现，本篇博客是分析<strong>支付完成</strong>的动画。</p>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20170417102022525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="支付宝支付动画"></p>
<h2 id="一、动画解析"><a href="#一、动画解析" class="headerlink" title="一、动画解析"></a>一、动画解析</h2><p>为了方便观察，放慢了动画的速度，并添加辅助线：<br><img src="http://img.blog.csdn.net/20170417155445027?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="原理分析"></p>
<p>通过上图可知，支付完成的动画由两部分组成：<strong>圆环动画</strong> + <strong>对号动画</strong></p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><h3 id="1、圆环动画"><a href="#1、圆环动画" class="headerlink" title="1、圆环动画"></a>1、圆环动画</h3><p>这个动画比较简单，是利用贝塞尔曲线画弧的功能。再利用CAShapeLayer的strokeEnd属性加上核心动画实现的圆环动画。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)circleAnimation&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//显示图层</span></div><div class="line">    <span class="built_in">CAShapeLayer</span> *circleLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    circleLayer.frame = _animationLayer.bounds;</div><div class="line">    [_animationLayer addSublayer:circleLayer];</div><div class="line">    circleLayer.fillColor =  [[<span class="built_in">UIColor</span> clearColor] <span class="built_in">CGColor</span>];</div><div class="line">    circleLayer.strokeColor  = BlueColor.CGColor;</div><div class="line">    circleLayer.lineWidth = lineWidth;</div><div class="line">    circleLayer.lineCap = kCALineCapRound;</div><div class="line">    </div><div class="line">    <span class="comment">//运动路径</span></div><div class="line">    <span class="built_in">CGFloat</span> lineWidth = <span class="number">5.0</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> radius = _animationLayer.bounds.size.width/<span class="number">2.0</span>f - lineWidth/<span class="number">2.0</span>f;</div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:circleLayer.position radius:radius startAngle:-M_PI/<span class="number">2</span> endAngle:M_PI*<span class="number">3</span>/<span class="number">2</span> clockwise:<span class="literal">true</span>];</div><div class="line">    circleLayer.path = path.CGPath;</div><div class="line">    </div><div class="line">    <span class="comment">//执行动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *checkAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</div><div class="line">    checkAnimation.duration = circleDuriation;</div><div class="line">    checkAnimation.fromValue = @(<span class="number">0.0</span>f);</div><div class="line">    checkAnimation.toValue = @(<span class="number">1.0</span>f);</div><div class="line">    checkAnimation.delegate = <span class="keyword">self</span>;</div><div class="line">    [checkAnimation setValue:<span class="string">@"checkAnimation"</span> forKey:<span class="string">@"animationName"</span>];</div><div class="line">    [circleLayer addAnimation:checkAnimation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2、对号动画"><a href="#2、对号动画" class="headerlink" title="2、对号动画"></a>2、对号动画</h3><p>对号动画是利用了贝塞尔曲线的画线特性，设置了两段曲线拼接成了一个对号。如上图所示对号由线段AB和线段BC拼接完成，然后再利用核心动画和CAShapeLayer的strokeEnd属性实现对号动画。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)checkAnimation&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//外切圆的边长</span></div><div class="line">    <span class="built_in">CGFloat</span> a = _animationLayer.bounds.size.width;</div><div class="line">    <span class="comment">//设置三个点 A、B、C</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(a*<span class="number">2.7</span>/<span class="number">10</span>,a*<span class="number">5.4</span>/<span class="number">10</span>)];</div><div class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(a*<span class="number">4.5</span>/<span class="number">10</span>,a*<span class="number">7</span>/<span class="number">10</span>)];</div><div class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(a*<span class="number">7.8</span>/<span class="number">10</span>,a*<span class="number">3.8</span>/<span class="number">10</span>)];</div><div class="line">    </div><div class="line">    <span class="comment">//显示图层</span></div><div class="line">    <span class="built_in">CAShapeLayer</span> *checkLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    checkLayer.path = path.CGPath;</div><div class="line">    checkLayer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">    checkLayer.strokeColor = BlueColor.CGColor;</div><div class="line">    checkLayer.lineWidth = lineWidth;</div><div class="line">    checkLayer.lineCap = kCALineCapRound;</div><div class="line">    checkLayer.lineJoin = kCALineJoinRound;</div><div class="line">    [_animationLayer addSublayer:checkLayer];</div><div class="line">    </div><div class="line">    <span class="comment">//执行动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *checkAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</div><div class="line">    checkAnimation.duration = checkDuration;</div><div class="line">    checkAnimation.fromValue = @(<span class="number">0.0</span>f);</div><div class="line">    checkAnimation.toValue = @(<span class="number">1.0</span>f);</div><div class="line">    checkAnimation.delegate = <span class="keyword">self</span>;</div><div class="line">    [checkAnimation setValue:<span class="string">@"checkAnimation"</span> forKey:<span class="string">@"animationName"</span>];</div><div class="line">    [checkLayer addAnimation:checkAnimation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a><a href="https://github.com/mengxianliang/XLPaymentHUD" target="_blank" rel="external">Github</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://mengxianliang.com/blog/2017/04/17/iOS%20动画解析%20支付宝支付动画%20上/&quot;&gt;上一篇博客&lt;/a&gt;分析了&lt;strong&gt;支付中&lt;/strong&gt;动画的实现，本篇博客是分析&lt;strong&gt;支付完成&lt;/strong&gt;的动画。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS动画" scheme="http://mengxianliang.github.io/blog/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>iOS 动画解析 支付宝支付动画 上</title>
    <link href="http://mengxianliang.github.io/blog/2017/04/17/iOS%20%E5%8A%A8%E7%94%BB%E8%A7%A3%E6%9E%90%20%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%A8%E7%94%BB%20%E4%B8%8A/"/>
    <id>http://mengxianliang.github.io/blog/2017/04/17/iOS 动画解析 支付宝支付动画 上/</id>
    <published>2017-04-17T04:55:43.000Z</published>
    <updated>2017-04-17T06:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时在用支付宝付款时，会有一个支付中的动画和一个支付完成的动画。这篇博客主要分析一下 <strong>支付中</strong> 的动画效果，效果如下：</p>
<p><img src="http://img.blog.csdn.net/20170417102022525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="支付宝支付动画"></p>
<a id="more"></a>
<h2 id="一、动画解析"><a href="#一、动画解析" class="headerlink" title="一、动画解析"></a>一、动画解析</h2><p>为了方便观察，添加了放慢加载动画的速度并添加辅助线：</p>
<p><img src="http://img.blog.csdn.net/20170417113801866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="放慢后的动画"></p>
<p>从图中可以看出：加载圆弧运动轨迹可分为<code>前半段</code>和<code>后半段</code>；并且圆弧的起始角度(StartAngle)和结束角度(EndAngle)在做有规律的变化；</p>
<p><strong>前半段:</strong> 从-0.5π到π，这一段运动中速度较快；StartAngle不变，始终未-0.5π；EndAngle在匀速上升，一直到π；前半段中圆弧不断变长，最后形成一个3/4的圆。</p>
<p><strong>后半段:</strong> 从π到1.5π，这一段运动速度较慢；StartAngle开始变化，从-0.5π变化到1.5π；EndAngle从π变化到1.5π，最后StartAngle和EndAngle重合于1.5π；后半段中圆弧不断变长，最后直至消失。</p>
<h2 id="二、实现代码"><a href="#二、实现代码" class="headerlink" title="二、实现代码"></a>二、实现代码</h2><h3 id="1、初始化一些全局属性"><a href="#1、初始化一些全局属性" class="headerlink" title="1、初始化一些全局属性"></a>1、初始化一些全局属性</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">//刷新工具</span></div><div class="line">    <span class="built_in">CADisplayLink</span> *_link;</div><div class="line">    <span class="comment">//显示圆环</span></div><div class="line">    <span class="built_in">CAShapeLayer</span> *_animationLayer;</div><div class="line">    <span class="comment">//起始角度</span></div><div class="line">    <span class="built_in">CGFloat</span> _startAngle;</div><div class="line">    <span class="comment">//结束角度</span></div><div class="line">    <span class="built_in">CGFloat</span> _endAngle;</div><div class="line">    <span class="comment">//当前动画进度</span></div><div class="line">    <span class="built_in">CGFloat</span> _progress;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、界面刷新工作由CADisplayLink来完成"><a href="#2、界面刷新工作由CADisplayLink来完成" class="headerlink" title="2、界面刷新工作由CADisplayLink来完成"></a>2、界面刷新工作由CADisplayLink来完成</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_link = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(displayLinkAction)];</div><div class="line">[_link addToRunLoop:[<span class="built_in">NSRunLoop</span> mainRunLoop] forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</div><div class="line">_link.paused = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<p>为了实现<strong>前半段</strong>和<strong>后半段</strong>的速度区别，定义了一个速度方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">CGFloat</span>)speed&#123;</div><div class="line">    <span class="keyword">if</span> (_endAngle &gt; M_PI) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.1</span>/<span class="number">60.0</span>f;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.8</span>/<span class="number">60.0</span>f;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过CADisplayLink刷新进度，进度增长的快慢有speed决定：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)displayLinkAction&#123;</div><div class="line">    _progress += [<span class="keyword">self</span> speed];</div><div class="line">    <span class="keyword">if</span> (_progress &gt;= <span class="number">1</span>) &#123;</div><div class="line">        _progress = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> updateAnimationLayer];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>刷新贝塞尔曲线的StartAngle和EndAngle实现曲线的运动：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)updateAnimationLayer&#123;</div><div class="line">    </div><div class="line">    _startAngle = -M_PI_2;</div><div class="line">    _endAngle = -M_PI_2 +_progress * M_PI * <span class="number">2</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (_endAngle &gt; M_PI) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> progress1 = <span class="number">1</span> - (<span class="number">1</span> - _progress)/<span class="number">0.25</span>;</div><div class="line">        _startAngle = -M_PI_2 + progress1 * M_PI * <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CGFloat</span> radius = _animationLayer.bounds.size.width/<span class="number">2.0</span>f - lineWidth/<span class="number">2.0</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> centerX = _animationLayer.bounds.size.width/<span class="number">2.0</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> centerY = _animationLayer.bounds.size.height/<span class="number">2.0</span>f;</div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(centerX, centerY) radius:radius startAngle:_startAngle endAngle:_endAngle clockwise:<span class="literal">true</span>];</div><div class="line">    path.lineCapStyle = kCGLineCapRound;</div><div class="line">    </div><div class="line">    _animationLayer.path = path.CGPath;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a><a href="https://github.com/mengxianliang/XLPaymentHUD" target="_blank" rel="external">Github</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时在用支付宝付款时，会有一个支付中的动画和一个支付完成的动画。这篇博客主要分析一下 &lt;strong&gt;支付中&lt;/strong&gt; 的动画效果，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417102022525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;支付宝支付动画&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS动画" scheme="http://mengxianliang.github.io/blog/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>iOS 动画解析 圆球加载动画 XLBallLoading</title>
    <link href="http://mengxianliang.github.io/blog/2017/04/13/iOS%20%E5%8A%A8%E7%94%BB%E8%A7%A3%E6%9E%90%20%E5%9C%86%E7%90%83%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%20XLBallLoading/"/>
    <id>http://mengxianliang.github.io/blog/2017/04/13/iOS 动画解析 圆球加载动画 XLBallLoading/</id>
    <published>2017-04-13T00:22:02.000Z</published>
    <updated>2017-04-13T02:38:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h2><p><img src="http://img.blog.csdn.net/20170412171114122?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="显示效果"></p>
<a id="more"></a>
<h2 id="一、原理分析"><a href="#一、原理分析" class="headerlink" title="一、原理分析"></a>一、原理分析</h2><h3 id="1、拆解动画"><a href="#1、拆解动画" class="headerlink" title="1、拆解动画"></a>1、拆解动画</h3><p>从效果图来看，动画可拆解成两部分：<code>放大动画</code>、<code>位移动画</code><br><code>放大动画</code> 比较简单，这里主要来分析一下<code>位移动画</code></p>
<p><strong>(1)、先去掉缩放效果：</strong></p>
<p><img src="http://img.blog.csdn.net/20170412172237518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="屏蔽放大效果"></p>
<p><strong>(2)、去掉其中的一个圆球</strong></p>
<p><img src="http://img.blog.csdn.net/20170412172645122?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>现在基本可以看出主要原理就是让其中一个圆球绕另一个球做<code>圆弧运动</code>，只要确定一个圆球的运动轨迹，另一个圆球和它左相对运动即可。下面咱们重点说一下这个<code>圆弧运动</code>的原理。</p>
<h3 id="2、圆弧运动"><a href="#2、圆弧运动" class="headerlink" title="2、圆弧运动"></a>2、圆弧运动</h3><p>为了方便观察我们先放慢一下这个动画，然后添加辅助线：<br><img src="http://img.blog.csdn.net/20170412181029776?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="放慢后的效果图"></p>
<p>从图中可以看出，蓝色球主要经过了三段轨迹</p>
<p>第一段：从左边缘逆时针运动180°到灰色球的右侧<br>第二段：从灰色球右侧贴着灰色球逆时针运动180°到其左侧<br>第三段：从灰色球左侧返回起始位置</p>
<p>既然分析出了运动轨迹，下面实现起来就方便了</p>
<p>第一段：蓝色球以A为起点，沿圆心O逆时针运动到B点<br><img src="http://img.blog.csdn.net/20170413101903722?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="第一段运动轨迹图"></p>
<p>第二段：蓝色球以B为起点绕圆心P运动到C点<br><img src="http://img.blog.csdn.net/20170413101748443?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="第二段运动轨迹图"></p>
<p>第三段：从C点返回原点<br><img src="http://img.blog.csdn.net/20170413102335442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="第三段运动轨迹图"></p>
<h2 id="二、实现代码"><a href="#二、实现代码" class="headerlink" title="二、实现代码"></a>二、实现代码</h2><p>###1、第一段运动：<br>确定起始点、圆心、半径，让蓝色小球绕大圆<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//动画容器的宽度</span></div><div class="line">   <span class="built_in">CGFloat</span> width = _ballContainer.bounds.size.width;</div><div class="line">   <span class="comment">//小圆半径</span></div><div class="line">   <span class="built_in">CGFloat</span> r = (_ball1.bounds.size.width)*ballScale/<span class="number">2.0</span>f;</div><div class="line">   <span class="comment">//大圆半径</span></div><div class="line">   <span class="built_in">CGFloat</span> R = (width/<span class="number">2</span> + r)/<span class="number">2.0</span>;</div><div class="line">   <span class="built_in">UIBezierPath</span> *path1 = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">   <span class="comment">//设置起始位置</span></div><div class="line">   [path1 moveToPoint:_ball1.center];</div><div class="line">   <span class="comment">//画大圆（第一段的运动轨迹）</span></div><div class="line">   [path1 addArcWithCenter:<span class="built_in">CGPointMake</span>(R + r, width/<span class="number">2</span>) radius:R startAngle:M_PI endAngle:M_PI*<span class="number">2</span> clockwise:<span class="literal">NO</span>];</div></pre></td></tr></table></figure></p>
<h3 id="2、第二段运动"><a href="#2、第二段运动" class="headerlink" title="2、第二段运动"></a>2、第二段运动</h3><p>以灰色小球中心为圆心，以其直径为半径绕小圆，并拼接两段曲线<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//画小圆</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path1_1 = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">    <span class="comment">//圆心为灰色小球的中心 半径为灰色小球的半径</span></div><div class="line">    [path1_1 addArcWithCenter:<span class="built_in">CGPointMake</span>(width/<span class="number">2</span>, width/<span class="number">2</span>) radius:r*<span class="number">2</span> startAngle:M_PI*<span class="number">2</span> endAngle:M_PI clockwise:<span class="literal">NO</span>];</div><div class="line">    [path1 appendPath:path1_1];</div></pre></td></tr></table></figure></p>
<h3 id="3、第三段运动"><a href="#3、第三段运动" class="headerlink" title="3、第三段运动"></a>3、第三段运动</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//回到原处</span></div><div class="line">    [path1 addLineToPoint:_ball1.center];</div></pre></td></tr></table></figure>
<h3 id="4、位移动画"><a href="#4、位移动画" class="headerlink" title="4、位移动画"></a>4、位移动画</h3><p>利用关键帧动画实现小球沿设置好的贝塞尔曲线移动<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//执行动画</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> *animation1 = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div><div class="line">animation1.path = path1.CGPath;</div><div class="line">animation1.removedOnCompletion = <span class="literal">YES</span>;</div><div class="line">animation1.duration = [<span class="keyword">self</span> animationDuration];</div><div class="line">animation1.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">[_ball1.layer addAnimation:animation1 forKey:<span class="string">@"animation1"</span>];</div></pre></td></tr></table></figure></p>
<h3 id="5、缩放动画"><a href="#5、缩放动画" class="headerlink" title="5、缩放动画"></a>5、缩放动画</h3><p>在每次位移动画开始时执行缩放动画<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)animationDidStart:(<span class="built_in">CAAnimation</span> *)anim&#123;</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> delay = <span class="number">0.3</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> duration = [<span class="keyword">self</span> animationDuration]/<span class="number">2</span> - delay;</div><div class="line">    </div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:duration delay:delay options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span>| <span class="built_in">UIViewAnimationOptionBeginFromCurrentState</span> animations:^&#123;</div><div class="line">        _ball1.transform = <span class="built_in">CGAffineTransformMakeScale</span>(ballScale, ballScale);</div><div class="line">        _ball2.transform = <span class="built_in">CGAffineTransformMakeScale</span>(ballScale, ballScale);</div><div class="line">        _ball3.transform = <span class="built_in">CGAffineTransformMakeScale</span>(ballScale, ballScale);</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        [<span class="built_in">UIView</span> animateWithDuration:duration delay:delay options:<span class="built_in">UIViewAnimationOptionCurveEaseInOut</span>| <span class="built_in">UIViewAnimationOptionBeginFromCurrentState</span> animations:^&#123;</div><div class="line">            _ball1.transform = <span class="built_in">CGAffineTransformIdentity</span>;</div><div class="line">            _ball2.transform = <span class="built_in">CGAffineTransformIdentity</span>;</div><div class="line">            _ball3.transform = <span class="built_in">CGAffineTransformIdentity</span>;</div><div class="line">        &#125; completion:<span class="literal">nil</span>];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="6、动画循环"><a href="#6、动画循环" class="headerlink" title="6、动画循环"></a>6、动画循环</h3><p>在每次动画结束时从新执行动画<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)animationDidStop:(<span class="built_in">CAAnimation</span> *)anim finished:(<span class="built_in">BOOL</span>)flag&#123;</div><div class="line">    <span class="keyword">if</span> (_stopAnimationByUser) &#123;<span class="keyword">return</span>;&#125;</div><div class="line">    [<span class="keyword">self</span> startPathAnimate];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a><a href="https://github.com/mengxianliang/XLBallLoading" target="_blank" rel="external">Github地址</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;显示效果&quot;&gt;&lt;a href=&quot;#显示效果&quot; class=&quot;headerlink&quot; title=&quot;显示效果&quot;&gt;&lt;/a&gt;显示效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170412171114122?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzI4MjUwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;显示效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS动画" scheme="http://mengxianliang.github.io/blog/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>图片横排显示测试2</title>
    <link href="http://mengxianliang.github.io/blog/2017/03/17/%E5%9B%BE%E7%89%87%E6%A8%AA%E6%8E%92%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%952/"/>
    <id>http://mengxianliang.github.io/blog/2017/03/17/图片横排显示测试2/</id>
    <published>2017-03-17T11:26:24.000Z</published>
    <updated>2017-03-17T15:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>你好 这是我的一片测试博客 哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈啊哈哈哈啊哈哈哈 aha啦啦啦啦啦啦啦垃圾号我及哦啊见覅偶骄傲is就发哦i<br><a id="more"></a><br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/18210.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/196232.jpg" alt=""></div></div><div class="group-picture-row"></div></div></div></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好 这是我的一片测试博客 哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈啊哈哈哈啊哈哈哈 aha啦啦啦啦啦啦啦垃圾号我及哦啊见覅偶骄傲is就发哦i&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://mengxianliang.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello My Blog ！</title>
    <link href="http://mengxianliang.github.io/blog/2017/03/09/Hello%20My%20Blog%20%EF%BC%81/"/>
    <id>http://mengxianliang.github.io/blog/2017/03/09/Hello My Blog ！/</id>
    <published>2017-03-09T03:25:15.000Z</published>
    <updated>2017-03-17T15:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>  之前一直在CSDN上写博客，时常有看到人家的个人博客，着实羡慕，所以就东施效颦弄了一个这样一个小站，今后会在这里继续边学习边整理的老套路，记录一下工作、学习中的点滴经验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  之前一直在CSDN上写博客，时常有看到人家的个人博客，着实羡慕，所以就东施效颦弄了一个这样一个小站，今后会在这里继续边学习边整理的老套路，记录一下工作、学习中的点滴经验。&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://mengxianliang.github.io/blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://mengxianliang.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>My Second Blog</title>
    <link href="http://mengxianliang.github.io/blog/2017/01/17/My-Second-Blog/"/>
    <id>http://mengxianliang.github.io/blog/2017/01/17/My-Second-Blog/</id>
    <published>2017-01-17T14:56:02.000Z</published>
    <updated>2017-03-17T16:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>  之前一直在CSDN上写博客，时常有看到人家的个人博客，着实羡慕，所以就东施效颦弄了一个这样一个小站，今后会在这里继续边学习边整理的老套路，记录一下工作、学习中的点滴经验。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/18210.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/196232.jpg" alt=""></div></div><div class="group-picture-row"></div></div></div>
<p>Hexo lalalalajflajsf封号福阿拉丁俊发腻好久佛爱家安居房垃圾搜if假按揭多否福哦啊接大佛爱U盾佛爱神的箭佛氨基酸的佛爱苏菲奥is就大佛阿斯U盾佛爱复苏哦</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  之前一直在CSDN上写博客，时常有看到人家的个人博客，着实羡慕，所以就东施效颦弄了一个这样一个小站，今后会在这里继续边学习边整理的老套路，记录一下工作、学习中的点滴经验。&lt;/p&gt;
&lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-
    
    </summary>
    
    
  </entry>
  
</feed>
